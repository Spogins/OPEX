/**
 * Copyright (c) Tiny Technologies, Inc. All rights reserved.
 * Licensed under the LGPL or a commercial license.
 * For LGPL see License.txt in the project root for license information.
 * For commercial licenses see https://www.tiny.cloud/
 */
/**
 * Jquery integration plugin.
 *
 * @class tinymce.core.JqueryIntegration
 * @private
 */
!function(){var e,t,n,i,r,a=[];r="undefined"!=typeof global?global:window,i=r.jQuery;var c=function(){
// Reference to tinymce needs to be lazily evaluated since tinymce
// might be loaded through the compressor or other means
return r.tinymce};i.fn.tinymce=function(e){var l,u,s,f=this,p="";
// No match then just ignore the call
if(!f.length)return f;
// Get editor instance
if(!e)return c()?c().get(f[0].id):null;f.css("visibility","hidden");// Hide textarea to avoid flicker
var d=function(){var t=[],r=0;
// Apply patches to the jQuery object, only once
n||(o(),n=!0),
// Create an editor instance for each matched node
f.each((function(n,i){var a,o=i.id,l=e.oninit;
// Generate unique id for target element if needed
o||(i.id=o=c().DOM.uniqueId()),
// Only init the editor once
c().get(o)||(
// Create editor instance and render it
a=c().createEditor(o,e),t.push(a),a.on("init",(function(){var e,n=l;f.css("visibility",""),
// Run this if the oninit setting is defined
// this logic will fire the oninit callback ones each
// matched editor instance is initialized
l&&++r==t.length&&("string"==typeof n&&(e=-1===n.indexOf(".")?null:c().resolve(n.replace(/\.\w+$/,"")),n=c().resolve(n)),
// Call the oninit function with the object
n.apply(e||c(),t))})))})),
// Render the editor instances in a separate loop since we
// need to have the full editors array used in the onInit calls
i.each(t,(function(e,t){t.render()}))};
// Load TinyMCE on demand, if we need to
if(r.tinymce||t||!(l=e.script_url))
// Delay the init call until tinymce is loaded
1===t?a.push(d):d();else{t=1,u=l.substring(0,l.lastIndexOf("/")),
// Check if it's a dev/src version they want to load then
// make sure that all plugins, themes etc are loaded in source mode as well
-1!=l.indexOf(".min")&&(p=".min"),
// Setup tinyMCEPreInit object this will later be used by the TinyMCE
// core script to locate other resources like CSS files, dialogs etc
// You can also predefined a tinyMCEPreInit object and then it will use that instead
r.tinymce=r.tinyMCEPreInit||{base:u,suffix:p},
// url contains gzip then we assume it's a compressor
-1!=l.indexOf("gzip")&&(s=e.language||"en",l=l+(/\?/.test(l)?"&":"?")+"js=true&core=true&suffix="+escape(p)+"&themes="+escape(e.theme||"modern")+"&plugins="+escape(e.plugins||"")+"&languages="+(s||""),
// Check if compressor script is already loaded otherwise setup a basic one
r.tinyMCE_GZ||(r.tinyMCE_GZ={start:function(){var t=function(e){c().ScriptLoader.markDone(c().baseURI.toAbsolute(e))};
// Add core languages
t("langs/"+s+".js"),
// Add themes with languages
t("themes/"+e.theme+"/theme"+p+".js"),t("themes/"+e.theme+"/langs/"+s+".js"),
// Add plugins with languages
i.each(e.plugins.split(","),(function(e,n){n&&(t("plugins/"+n+"/plugin"+p+".js"),t("plugins/"+n+"/langs/"+s+".js"))}))},end:function(){}}));var v=document.createElement("script");v.type="text/javascript",v.onload=v.onreadystatechange=function(n){n=n||window.event,2===t||"load"!=n.type&&!/complete|loaded/.test(v.readyState)||(c().dom.Event.domLoaded=1,t=2,
// Execute callback after mainscript has been loaded and before the initialization occurs
e.script_loaded&&e.script_loaded(),d(),i.each(a,(function(e,t){t()})))},v.src=l,document.body.appendChild(v)}return f},
// Add :tinymce pseudo selector this will select elements that has been converted into editor instances
// it's now possible to use things like $('*:tinymce') to get all TinyMCE bound elements.
i.extend(i.expr[":"],{tinymce:function(e){var t;return!!(e.id&&"tinymce"in r&&(t=c().get(e.id))&&t.editorManager===c())}});
// This function patches internal jQuery functions so that if
// you for example remove an div element containing an editor it's
// automatically destroyed by the TinyMCE API
var o=function(){
// Removes any child editor instances by looking for editor wrapper elements
var t=function(e){
// If the function is remove
"remove"===e&&this.each((function(e,t){var n=a(t);n&&n.remove()})),this.find("span.mceEditor,div.mceEditor").each((function(e,t){var n=c().get(t.id.replace(/_parent$/,""));n&&n.remove()}))},n=function(e){var n,i=this;
// Handle set value
/*jshint eqnull:true */if(null!=e)t.call(i),
// Saves the contents before get/set value of textarea/div
i.each((function(t,n){var i;(i=c().get(n.id))&&i.setContent(e)}));else if(i.length>0&&(n=c().get(i[0].id)))return n.getContent()},a=function(e){var t=null;return e&&e.id&&r.tinymce&&(t=c().get(e.id)),t},o=function(e){return!!(e&&e.length&&r.tinymce&&e.is(":tinymce"))},l={};
// Loads or saves contents from/to textarea if the value
// argument is defined it will set the TinyMCE internal contents
// Patch some setter/getter functions these will
// now be able to set/get the contents of editor instances for
// example $('#editorid').html('Content'); will update the TinyMCE iframe instance
i.each(["text","html","val"],(function(t,r){var c=l[r]=i.fn[r],u="text"===r;i.fn[r]=function(t){var r=this;if(!o(r))return c.apply(r,arguments);if(t!==e)return n.call(r.filter(":tinymce"),t),c.apply(r.not(":tinymce"),arguments),r;// return original set for chaining
var l="",s=arguments;return(u?r:r.eq(0)).each((function(e,t){var n=a(t);l+=n?u?n.getContent().replace(/<(?:"[^"]*"|'[^']*'|[^'">])*>/g,""):n.getContent({save:!0}):c.apply(i(t),s)})),l}})),
// Makes it possible to use $('#id').append("content"); to append contents to the TinyMCE editor iframe
i.each(["append","prepend"],(function(t,n){var r=l[n]=i.fn[n],c="prepend"===n;i.fn[n]=function(t){var n=this;return o(n)?t!==e?("string"==typeof t&&n.filter(":tinymce").each((function(e,n){var i=a(n);i&&i.setContent(c?t+i.getContent():i.getContent()+t)})),r.apply(n.not(":tinymce"),arguments),n):void 0:r.apply(n,arguments)}})),
// Makes sure that the editor instance gets properly destroyed when the parent element is removed
i.each(["remove","replaceWith","replaceAll","empty"],(function(e,n){var r=l[n]=i.fn[n];i.fn[n]=function(){return t.call(this,n),r.apply(this,arguments)}})),l.attr=i.fn.attr,
// Makes sure that $('#tinymce_id').attr('value') gets the editors current HTML contents
i.fn.attr=function(t,r){var c=this,u=arguments;if(!t||"value"!==t||!o(c))return l.attr.apply(c,u);if(r!==e)return n.call(c.filter(":tinymce"),r),l.attr.apply(c.not(":tinymce"),u),c;// return original set for chaining
var s=c[0],f=a(s);return f?f.getContent({save:!0}):l.attr.apply(i(s),u)}}}();
